@page
@model FindDistribution
@{
    ViewData["Title"] = "FindDistribution";
}

<link rel="stylesheet" href="/css/Control.Geocoder.css"/>
<link rel="stylesheet" href="https://unpkg.com/leaflet@latest/dist/leaflet.css"/>

<form method="post">
    <div class="container mt-5">
        <div class="row">
            <div class="col-md-3">
                <div class="m-2 d-grid">
                    <a class="button btn btn-lg btn-outline-success" asp-area="" asp-page="/Givehelp/Supermarkets">Back</a>
                </div>
            </div>

            <div class="col-md-6 text-center">
                <h1 class="display-4">Find a Donation Point</h1>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="col-11 d-grid mx-auto">
            @Html.AntiForgeryToken()
            <div class="image-box" id="map"></div>
        </div>
    </div>

    <div id="Top5Section" class="container">
        <div class="row">
            <div class="col-8 d-grid mx-auto">
                <h1>5 Closest Donation Points</h1>
                <div class="text-box mt-2" id="FoodbankClosest1"></div>
                <div class="text-box mt-2" id="FoodbankClosest2"></div>
                <div class="text-box mt-2" id="FoodbankClosest3"></div>
                <div class="text-box mt-2" id="FoodbankClosest4"></div>
                <div class="text-box mt-2" id="FoodbankClosest5"></div>
            </div>
        </div>
    </div>
</form>

@section Scripts{
    <script src="https://unpkg.com/leaflet@latest/dist/leaflet-src.js"></script>
    <script src="/js/Control.Geocoder.js"></script>

    <script type="text/javascript">
        const Top5section = document.getElementById('Top5Section');

        var warehouseIcon = L.icon({
              iconUrl: '/img/warehouse.png',//copy righted dont use for final
              iconSize:     [50, 50],
              iconAnchor:   [25, 50],
              popupAnchor:  [-3, -76]
        });

        var map = L.map('map').setView([ 54.596442,  -3.9], 6);

        var featureGroup = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');
        map.addLayer(featureGroup);

        var geocoder = L.Control.Geocoder.nominatim({
             geocodingQueryParams: {countrycodes: 'gb,im,gg,je'}
        });
        if (typeof URLSearchParams !== 'undefined' && location.search) {
          var params = new URLSearchParams(location.search);
          var geocoderString = params.get('geocoder');
          if (geocoderString && L.Control.Geocoder[geocoderString]) {
            console.log('Using geocoder', geocoderString);
            geocoder = L.Control.Geocoder[geocoderString]();
          } else if (geocoderString) {
            console.warn('Unsupported geocoder', geocoderString);
          }
        }

        var markerGroup;

        var control = L.Control.geocoder({
            collapsed: false,
            placeholder: 'Search Postcode or Address',
            geocoder
        })

        .on('markgeocode', function(e) {
          var usersLatitude = e.geocode.center.lat;
          var usersLongitude = e.geocode.center.lng;
          control._expand();
          $.ajax({
              type: "POST",
              url: '/GiveHelp/FindDistribution',
              data: JSON.stringify({Lat: usersLatitude, Lng: usersLongitude}),
              contentType: "application/json; charset=utf-8",
              beforeSend (xhr){
                  xhr.setRequestHeader("RequestVerificationToken", $('input[name="__RequestVerificationToken"]').val());
              },

              dataType: 'json',
              success (result){
                  if (markerGroup != null) {
                      markerGroup.clearLayers();
                  }

                 var closest5Markers = [];
                 var iterator = 0;
                 for(const element of result){
                     closest5Markers[iterator] = L.marker([element.coord.lat, element.coord.lng], {icon:warehouseIcon}).bindPopup(element.name.toString() + " <br> " + element.distance.toString() + "m away<br> " + '<a href="/Foodbank/MainLocation/'+ element.id +'">Click here to learn more</a> </br>');    //need to figure out how to new line these and format the distance so we get no deciamals
                     $("#FoodbankClosest" + (iterator+1)).html("<p>" + element.name.toString() + "<br>" + element.address.toString() + "<br>" + element.postcode.toString() + "<br>" + element.distance.toString() + "m away <br> " + ' <a href="/Foodbank/MainLocation/'+ element.id + '">Click here to learn more</a>' + "</p>");
                     iterator++;
                 }

                 markerGroup = L.featureGroup([closest5Markers[0],closest5Markers[1],closest5Markers[2],closest5Markers[3],closest5Markers[4]]);
                 map.addLayer(markerGroup);
                 map.fitBounds([markerGroup.getBounds().pad(0.2), e.bbox]);
                 Top5Section.style.display = 'block';
                 
                 window.location.hash = "Top5Section";

                 if (history.pushState) {
                    var newurl = window.location.protocol + "//" + window.location.host + '/Foodbank/DistributionPage/Location?=' + control._input.value;   //change testmap name
                    window.history.pushState({path:newurl},'',newurl);
                }
              },
              error (xhr, status, err){
                  alert("We weren't unable to return any data");
                  alert(err.toString(), 'Error - LoadListItemsHelper');
              }
          });
        })
        .addTo(map);

        control._expand();
        
        window.onload = function(){
                    $(".leaflet-control-geocoder-icon").click(function() {
                        control._geocode();
                      });
                };

        L.tileLayer('https://{s}.tile.osm.org/{z}/{x}/{y}.png', {
          attribution: '&copy; <a href="https://osm.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

    </script>
}