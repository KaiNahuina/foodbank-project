@page "{Location?}"
@model Foodbank_Project.Pages.testMapModel
@{
}
<link rel="stylesheet" href="~/css/Control.Geocoder.css" />
<link rel="stylesheet" href="https://unpkg.com/leaflet@latest/dist/leaflet.css" />


<script src="https://unpkg.com/leaflet@latest/dist/leaflet-src.js"></script>
<script src="~/js/Control.Geocoder.js"></script> 


<!-- Credit Leaflet, open street map, nomiatim, leaflet search controll -->
<div class="container">
    <div class="row">
        <div class="col col-4">
            <p> </p>
        </div>
        <div class="col col-5">
            <form >
                <div class="mb-3">
                    <label for="searchFoodbank" class="form-label">Find your nearest Foodbank</label>
                    <input type="text" class="form-control" value="@RouteData.Values["Location"]" id="searchFoodbank" placeholder="DONT USE THIS TO SEARCH FOR A FOODBANK" aria-describedby="searchBank" />     <!--this needs to be here but hidden on the page or something -->
                    <div id="searchBank" class="form-text"></div> 
                </div>
                <button type="submit" class="btn btn-primary">Search</button>
                @Html.AntiForgeryToken()
            </form>
        </div>
    </div>
</div>

<div id="map"></div>

<!-- we make the top 5 list in the c# pages so it should be as simple as grabbing them and putting it into a list-->

<script type="text/javascript">
    

    var userInputForLocation = document.getElementById('searchFoodbank').value; //change grab to grab from the other box ?
    console.log(userInputForLocation);

    var foodbankIcon = L.icon({
          iconUrl: '/Images/leaf.png',//https://www.flaticon.com/free-icon/leaf_892917?term=leaf&page=1&position=3&page=1&position=3&related_id=892917&origin=tag

          iconSize:     [30, 30], 
          iconAnchor:   [0, 30], 
          popupAnchor:  [-3, -76] // point from which the popup should open relative to the iconAnchor
    });

    var warehouseIcon = L.icon({
          iconUrl: '/Images/warehouse.png',//copy righted dont use for final

          iconSize:     [50, 50], 
          iconAnchor:   [25, 50], 
          popupAnchor:  [-3, -76] // point from which the popup should open relative to the iconAnchor
    });
    

    var map = L.map('map').setView([ 54.596442,  -3.9], 6);
    
    var featureGroup = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');

    map.addLayer(featureGroup);
  
    map.locate({setView: true, maxZoom: 14});       //allow permission to locate you on the page, press the lock in the top right and reset permission to get back to the view(NEED TO MAKE IT REQUEST EACH TIME ?)

    var geocoder = L.Control.Geocoder.nominatim();            //the type of geocoder used 
    if (typeof URLSearchParams !== 'undefined' && location.search) {
        // parse /?geocoder=nominatim from URL
      var params = new URLSearchParams(location.search);
      var geocoderString = params.get('geocoder');
      if (geocoderString && L.Control.Geocoder[geocoderString]) {
        console.log('Using geocoder', geocoderString);
        geocoder = L.Control.Geocoder[geocoderString]();
      } else if (geocoderString) {
        console.warn('Unsupported geocoder', geocoderString);
      }
    }



    var control = L.Control.geocoder({  //set the geocoder search type
      query: userInputForLocation,   //we will need this to input our own data                    //we need to type a call back function to input
      placeholder: 'Search Postcode or Address',
      geocoder: geocoder,  //this tells use the standard of searching

    })

    .on('markgeocode', function(e) {
      var usersLatitude = e.geocode.center.lat;
      var usersLongitude = e.geocode.center.lng;
      console.log(JSON.stringify({Lat: usersLatitude, Lng: usersLongitude}));
      control._expand();
      $.ajax({
          type: "POST",         //on post gets us a return but on get doesnt 
          url: '/testMap?handler=Coord',
          data: JSON.stringify({Lat: usersLatitude, Lng: usersLongitude}),
          contentType: "application/json; charset=utf-8",
          beforeSend: function(xhr){
              xhr.setRequestHeader("RequestVerificationToken", $('input[name="__RequestVerificationToken"]').val());            //debug wont write if this isnt here
          },
          
          dataType: 'json',
          success: function (result){
             //layerGroup.clearLayers();    this is the clear function but need to decide where it should go
             var closest5Markers = [];
             var iterator = 0;
             for(const element of result){
                 closest5Markers[iterator] = L.marker([element.coord.lat, element.coord.lng], {icon:foodbankIcon}).bindPopup(element.name.toString() + " <br> " + element.distance.toString() + " <br> " + '<a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ&ab_channel=RickAstley">Click here to learn more</a>');    //need to figure out how to new line these and format the distance so we get no deciamals
                 iterator++;
                 //console.log(element.distance);
                 //console.log(element.name);
                 //console.log(element.id);
                 //console.log(element.address);
                 //console.log(element.coord.lat);
                 //console.log(element.coord.lng);
             }
             var featureGroup = L.featureGroup([closest5Markers[0],closest5Markers[1],closest5Markers[2],closest5Markers[3],closest5Markers[4]]);
             featureGroup.addTo(map);
             //var testResult = featureGroup.getBounds();
             //map.fitBounds(testResult);                   //This might zoom in on the group of markers better but gotta figure it out
          },
          error: function(xhr, status, err) {
              alert("We weren't unable to return any data")
              alert(err.toString(), 'Error - LoadListItemsHelper');
          }
      });
    })
    .addTo(map);
    var marker;                                   //need to control the ammount it zooms in because right now its very zoomed

    geocoder.geocode(userInputForLocation, function(ctx){control._geocodeResultSelected(ctx[0])})

    L.tileLayer('https://{s}.tile.osm.org/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="https://osm.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

</script>